// Contract Objectives:
//		1) Reach orbit with a crewed vessel
//		
//
//------------------------------------------------------------------------------------------------------------------------

CONTRACT_TYPE
{
	name				= CrewRoverMoon
	sortKey				= 240
	group				= Kerbal Exploration Division
	agent				= Kerbal Exploration Division
	title				= #CrewRoverMoon_1
	genericTitle		= #CrewRoverMoon_2
	synopsis			= #CrewRoverMoon_3
	description			= #CrewRoverMoon_4
	genericDescription 	= #CrewRoverMoon_5
	minExpiry			= 5.0
	maxExpiry			= 100.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	completedMessage	= #CrewRoverMoon_6
	maxCompletions		= 0
	maxSimultaneous		= 1
	//
	targetBody			= @/targetBodyValid1
	//
	// Contract Reweards
	// Possible values are: Trivial , Significant , Exceptional 
	//
	prestige			= Trivial									
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.5
	rewardReputation	= @KerbalCareerContracts:rewardRep * 1.5	
	rewardFunds			= @KerbalCareerContracts:baseComp * 1.75
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.5
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------

	DATA_EXPAND
	{
		type 				= CelestialBody
		targetBody1			= @KerbalCareerContracts:homeMoonsSurface
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}		
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true
        recoveryMethod = Ideal
    }
	DATA
	{
		type			= List<ScienceExperiment>
		hidden			= true
		//experiment1		= AvailableExperiments(@/targetBody)
		experiment1		= [ evaReport, crewReport, surfaceSample, deployedSeismicSensor, deployedSeismicSensor, deployedWeatherReport, deployedIONCollector, ROCScience ]
	}
	DATA
	{
		type 			= Biome
        hidden 			= true
		uniquenessCheck = CONTRACT_ACTIVE	
		biometemp		= @targetBody.Biomes().Where(sc => sc.RemainingScience() > 10).SelectUnique()
	}	
	DATA
	{
		type			= List<ScienceSubject>
		hidden 			= true
		scienceList1	= AllScienceSubjectsByBiomeExperiment([@/biometemp], @experiment1 )
		scienceList2	= @scienceList1.Where(sc => sc.RemainingScience() / sc.TotalScience() >= 0.1 )
		scienceList3	= @scienceList2.Where(sc => sc.Situation() == SrfLanded)
		scienceList		= @scienceList4.Random(2)
	}
		
		

	
	// Contract Requirements --------------------------------------------------------------------------------------------------
	
	REQUIREMENT
	{
		name 		= Orbit
		type 		= Orbit
		checkType  	= MANNED
		title 		= #GENERIC_REQ_MOrb
    }
	REQUIREMENT
	{
		name 		= Landing
		type 		= Landing
		checkType 	= MANNED
		title 		= #GENERIC_REQ_MLand 
	}
	REQUIREMENT
	{
		name 		= ReturnFromSurface
		type 		= ReturnFromSurface
		checkType 	= MANNED
		title 		= #GENERIC_REQ_MRet 
    }
	REQUIREMENT
	{
		type = Expression
		title = #SurfaceScience_7
		expression = @/scienceList.Count() >= 1
	}

	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			KED_Contracts	= $KED_Contracts + 1
		}
	}
	
	// Contract Parameters ----------------------------------------------------------------------------------------------------

	// Objective #1: Reach the target   
	PARAMETER
	{
		name 				= CrewRoverMoon
		type				= VesselParameterGroup
		title				= #CrewRoverMoon_7
		define 				= CrewRoverMoon
		completedMessage 	= #CrewRoverMoon_8
		rewardFunds 		= @KerbalCareerContracts:baseComp * 0.5	

		PARAMETER
		{
			name	= HasCrew
			type	= HasCrew
			minCrew	= 1
			maxCrew	= 10
		}
		PARAMETER
		{
			name		= VesselIsType
			type		= VesselIsType
			vesselType 	= Rover
			title 		= #GENERIC_NT_RV
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = LANDED
			title = #CrewRoverMoon_9
			completeInSequence 	= true
			disableOnStateChange 	= true
		}
		PARAMETER
		{
			name				= CollectMoonScience
			type				= CollectScience
			title				= #MoonScience_10
			subject 			= @scienceID
			recoveryMethod 		= Ideal
			rewardFunds 		= @KerbalCareerContracts:baseComp * 0.2
			completedMessage 	= #MoonScience_9		
			//
			ITERATOR
			{
				type = ScienceSubject
				scienceID = @/scienceList
				REQUIREMENT
				{
					type = Expression
					expression = @../scienceList.Count() > 0
				}
			}
		}
	}

	PARAMETER
	{
		name 			= KerbalDeaths
		type 			= KerbalDeaths	
		countMax 		= 1
		vessel 			= CrewRoverMoon
		title			= #GENERIC_NoDeaths
	}	

}