//
//------------------------------------------------------------------------------------------------------------------------

CONTRACT_TYPE
{
	name				= CrewPlanetOrbit
	sortKey				= 260
	group				= Kerbal Exploration Division
	agent				= Kerbal Exploration Division
	title				= #CrewPlanetOrbit_1
	genericTitle		= #CrewPlanetOrbit_2
	synopsis			= #CrewPlanetOrbit_3
	description			= #CrewPlanetOrbit_4
	genericDescription 	= #CrewPlanetOrbit_5
	minExpiry			= 5.0
	maxExpiry			= 100.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	completedMessage	= #CrewPlanetOrbit_6
	maxCompletions		= 1
	maxSimultaneous		= 1
	//
	targetBody			= @/targetBodyValid1
	//
	// Contract Reweards
	// Possible values are: Trivial , Significant , Exceptional 
	//
	prestige			= Trivial									
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.5
	rewardReputation	= @KerbalCareerContracts:rewardRep * 1.0	
	rewardFunds			= @KerbalCareerContracts:baseComp * 2.0
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.75
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------

	// 		homeSystemMoons = Home Systems PLanets that Have Moons orbiting
	//		homeSysMoonSurf	= Home Systems Planets with Moons that have a surface
	//		moonSystems		= All moons in the game (contains both in and out  of the home system

	DATA_EXPAND
	{
		type 				= CelestialBody
		targetBody1			= @KerbalCareerContracts:homeSystemPlanets
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}		

	DATA
	{
		type = double
		SpaceThreshold 	= @/targetBody.SpaceAltitudeThreshold()
		AtmLimit 		= @/targetBody.AtmosphereAltitude()
		bodySOI 		= @/targetBody.SphereOfInfluence()
		maxPeOrbit		= @/SpaceThreshold - (@/SpaceThreshold - (@/AtmLimit*0.3))
		minApOrbit		= @/SpaceThreshold + ((@bodySOI - @/SpaceThreshold) *0.3)		
		//
		targetAlt1		= @/maxPeOrbit / 1000
		targetAlt2		= @/minApOrbit / 1000
		title 			= #GENERIC_Altitudes
	}
	DATA
	{
		type				= int
		requiredValue 		= false
		numHomeMoons		= @KerbalCareerContracts:homeMoons.Count()
		numHomeMoonsOrbit	= @KerbalCareerContracts:orbitedMoons.Count()
		numMoons			= @/pMoonList.Count()								// Find the number of Moons in orbit around the planet
		
	}	
	DATA
	{
		type				= List<CelestialBody>
		requiredValue		= false
		targetList		 	= @KerbalCareerContracts:nextBodies
		reachedList			= @KerbalCareerContracts:reachedPlanets		
		//pMoonList			= @targetBodyValid1.Children()							// Find the list of moons in orbit around the planet
	}
	
	// Contract Requirements --------------------------------------------------------------------------------------------------

	REQUIREMENT
	{
		name 			= Orbit
		type			= Orbit
		checkType 		= UNMANNED
		title			= #GENERIC_REQ_3
    }	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @/numHomeMoons == @/numHomeMoonsOrbit
		title = #GENERIC_REQ_7
	}
	REQUIREMENT
	{
		name = NextPlanetCheck
		type = Expression
		expression = (@/targetList.Contains(@/targetBodyValid1) || @/reachedList.Contains(@/targetBodyValid1))  == true
		title = #GENERIC_REQ_8
	}

	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			KED_Contracts	= $KED_Contracts + 1
		}
	}
	
	// Contract Parameters ----------------------------------------------------------------------------------------------------
	
	// Objective #1: Launch and send a kerbal into orbit around the planet
	PARAMETER
	{
		name 					= CrewPlanetOrbit
		type 					= VesselParameterGroup
		title 					= #CrewPlanetOrbit_7
		define 					= CrewPlanetOrbit
		disableOnStateChange 	= true
		rewardFunds				= @KerbalCareerContracts:baseComp * 1.0
		completedMessage		= #CrewPlanetOrbit_7a

		PARAMETER
		{
			name	= NewVessel
			type	= NewVessel
			title	= #GENERIC_NV
		}
		PARAMETER
		{
			name		= VesselIsType
			type		= VesselIsType
			vesselType 	= Ship
			title 		= #GENERIC_NT_SH
		}
		PARAMETER
		{
			name	= HasCrew
			type	= HasCrew
			minCrew	= 1
		}
		PARAMETER
		{
			name 				= Orbit
			type 				= Orbit
			maxPeA 				= @/maxPeOrbit
			minApA				= @/minApOrbit
			situation 			= ORBITING
			title 				= #CrewPlanetOrbit_8
			completeInSequence 	= true
			disableOnStateChange 	= true
		}
		PARAMETER
		{
			name 				= Duration
			type				= Duration
			duration			= 7d			
			preWaitText			= #CrewPlanetOrbit_9
			waitingText			= #CrewPlanetOrbit_10
			completionText 		= #CrewPlanetOrbit_11
			completeInSequence 	= true
			disableOnStateChange 	= true
		}

		PARAMETER
		{
			name 				= ReturnHome
			type 				= ReturnHome
			targetBody 			= HomeWorld()
			title 				= #CrewPlanetOrbit_19
			completeInSequence 	= true
		}

	}
	PARAMETER
	{
		name			= CollectScience
		type			= CollectScience
		//optional		= true
		situation		= InSpaceLow
		experiment		= crewReport
		recoveryMethod	= Ideal
		title 			= #CrewPlanetOrbit_12
	}
	PARAMETER
	{
		name			= CollectScience
		type			= CollectScience
		//optional		= true
		situation		= InSpaceHigh
		experiment		= crewReport
		recoveryMethod	= Ideal
		title 			= #CrewPlanetOrbit_13
	}
	PARAMETER
	{
		name			= CollectScience
		type			= CollectScience
		optional		= true
		situation		= InSpaceLow
		experiment		= evaReport
		recoveryMethod	= Ideal
		title 			= #CrewPlanetOrbit_14
	}
	PARAMETER
	{
		name			= CollectScience
		type			= CollectScience
		optional		= true
		situation		= InSpaceHigh
		experiment		= evaReport
		recoveryMethod	= Ideal
		title 			= #CrewPlanetOrbit_15
	}
	PARAMETER
	{
		name 			= KerbalDeaths
		type 			= KerbalDeaths
		vessel			= CrewPlanetOrbit
		vessel			= CrewPlanetMoonOrbit
		countMax 		= 1
		title			= #GENERIC_NoDeaths
	}


}