// Goal for this contract is collect science on the surface ofthe planet / moon.  
//
CONTRACT_TYPE
{
	name 			= PlanetScience
	sortKey 		= 240
	group 			= Planetary Exploration Division
	agent			= Planetary Exploration Division
	title			= #PlanetScience_1
	genericTitle	= #PlanetScience_2
	topic			= Exploration
	synopsis 		= #PlanetScience_3
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 40
	maxCompletions 	= 0
	maxSimultaneous = 4
	targetBody		= @/targetBodyValid1
	
	description 		= #PlanetScience_4
	genericDescription 	= #PlanetScience_5
	completedMessage	= #PlanetScience_6
		
	// Contract Reweards
	prestige			= Trivial										// Possible values are: Trivial , Significant , Exceptional 
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.1
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.75	
	rewardFunds			= @KerbalCareerContracts:baseComp * 1.5
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.6							
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA
	{
		type				= List<CelestialBody>
		hidden				= true
		Landed				= @KerbalCareerContracts:landedList
	}

	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		uniquenessCheck	 	= CONTRACT_ACTIVE
		targetBodyValid1	= @KerbalCareerContracts:landedList.SelectUnique()
		title				= #GENERIC_BODY
	}		
	DATA
	{
		type = int
		selectRoll 		= Random(1, 2)
		requiredValue 	= true
		title			= Random select either surface or space science
		
		//
	}
	DATA
	{
		type = string
		requiredValue = true
		scienceType = @/selectRoll == 1 ? "Space Science" : "Surface Science"
		title 	= Select either surface or space science
	}
 	DATA
	{
		type			= List<ScienceExperiment>
		hidden			= true
		experiment1		= AvailableExperiments(@/targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
	}	
	DATA
	{
		type 			= Biome
		requiredValue	 = true
		uniquenessCheck = CONTRACT_ACTIVE	
		biometemp		= @targetBody.Biomes().Where(sc => sc.RemainingScience() > 10).SelectUnique()
		title			= Identify target biome where there is more than 10 science remaining
	}
	
	DATA
	{
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
		//
		type			= List<ScienceSubject>
        hidden 			= false
		requiredValue 	= false
		//
		// Identify science to retrieve in space around the moon
		//
		scienceListTemp1		= @/selectRoll == 1 ? AllScienceSubjectsByBodyExperiment([@targetBody], @experiment1) : AllScienceSubjectsByBiomeExperiment([@/biometemp], @experiment1 )
		scienceListTemp2		= @/selectRoll == 1 ? @scienceListTemp1.Where(s => s.Situation() == InSpaceLow || s.Situation() == InSpaceHigh) : @scienceListTemp1.Where( s => s.Situation() == SrfLanded || s.Situation() == SrfSplashed)
		scienceListTemp3		= @/scienceListTemp2.Where(s => s.RemainingScience() / s.TotalScience() >= 0.1)
		scienceList				= @/scienceListTemp3.Random(4)
		//
		title					= Select science list for either space science or surface science
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		type = Expression
		title = #PlanetScience_7
		expression = @/scienceList.Count() >= 1
	}
	REQUIREMENT
	{
		name	 	= Landing
		type 		= Landing
		checkType 	= UNMANNED
		title 		= #PlanetScience_8
	}
	REQUIREMENT
	{
		name	 	= Orbit
		type 		= Orbit
		checkType 	= UNMANNED
		title 		= #PlanetScience_8a
	}
	REQUIREMENT:NEEDS[SCANsat]
	{
		name		= SCANsatCoverage
		type		= SCANsatCoverage
		minCoverage = 75
		scanType 	= Biome
		title 		= #PlanetScience_8b
	}
	
	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			PED_Contracts	= $PED_Contracts + 1
		}
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
    {
		name 				= CollectSpaceScience
		type 				= CollectScience
        subject 			= @scienceID
        recoveryMethod 		= Ideal
		rewardFunds 		= @KerbalCareerContracts:baseComp * 0.7
		completedMessage 	= #PlanetScience_9
		title 				= #PlanetScience_10
 		ITERATOR
        {
            type = ScienceSubject
            scienceID = @/scienceList
 			REQUIREMENT
			{
				type = Expression
				expression = @../scienceList.Count() > 0
			}
		}
    }

}	
		
	