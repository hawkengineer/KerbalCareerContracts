CONTRACT_TYPE
{
	name				= PlanetSampleReturn
	sortKey				= 120
	group				= Planetary Exploration Division
	agent				= Planetary Exploration Division
	title				= #PlanetSampleReturn_1
	genericTitle		= #PlanetSampleReturn1
	synopsis			= #PlanetSampleReturn_2
	description			= #PlanetSampleReturn_3
	genericDescription 	= #PlanetSampleReturn_4
	minExpiry			= 5.0
	maxExpiry			= 100.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	completedMessage	= #PlanetSampleReturn_5
	maxCompletions		= 0
	maxSimultaneous		= 2
	//
	targetBody			= @/targetBodyValid1
	//
	// Contract Reweards
	// Possible values are: Trivial , Significant , Exceptional 
	//
	prestige			= Trivial									
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.5
	rewardReputation	= @KerbalCareerContracts:rewardRep * 1.2	
	rewardFunds			= @KerbalCareerContracts:baseComp * 1.75
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.5
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------

	DATA
	{
		type				= List<CelestialBody>
		hidden				= true
		LandedList			= @KerbalCareerContracts:landedList
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		uniquenessCheck	 	= CONTRACT_ACTIVE
		targetBodyValid1	= @KerbalCareerContracts:landedList.SelectUnique()
		title				= #GENERIC_BODY
	}		
 	DATA
	{
		type			= List<ScienceExperiment>
		hidden			= true
		experiment1		= [ mysteryGoo, mobileMaterialsLab ]
	}	
	DATA
	{
		type 			= Biome
        hidden = true
		biometemp		= @targetBody.Biomes().Where(sc => sc.RemainingScience() > 10).Random()
	}
	DATA
	{
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
		//
		type			= List<ScienceSubject>
        hidden = true
		uniquenessCheck	 	= CONTRACT_ACTIVE
		//
		ScienceTemp1		= AllScienceSubjectsByBiomeExperiment([@/biometemp], @experiment1 )
		ScienceTemp2		= @surfaceScienceTemp1.Where( s => s.Situation() == SrfLanded )
		ScienceTemp3		= @surfaceScienceTemp2.Where( s => s.RemainingScience() / s.TotalScience() >= 0.1)
		ScienceList			= @surfaceScienceTemp3.SelectUnique
	}
	
	// Contract Requirements --------------------------------------------------------------------------------------------------
	
	REQUIREMENT
	{
		type = Expression
		title = Must Have a target that we previously landed on the surface
		expression = @/LandedList.Count() >= 1
	}
	REQUIREMENT
	{
		type = Expression
		title = Must have a valid surface science to perform
		expression = @/surfaceScienceList.Count() >= 1
	}

	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			PED_Contracts	= $PED_Contracts + 1
		}
	}
	
	// Contract Parameters ----------------------------------------------------------------------------------------------------
	
	// Objective #1: Orbit the target Planet
	PARAMETER
	{
		name = PlanetSampleReturnProbe
		type = VesselParameterGroup
		title = #PlanetSampleReturn_7
		define = PlanetSampleReturnProbe
		disableOnStateChange = false
		completedMessage = #PlanetSampleReturn_8
		rewardFunds = @/KerbalCareerContracts:baseComp * 0.8

		PARAMETER
		{
			name	= NewVessel
			type	= NewVessel
			title	= #GENERIC_NV
		}
		PARAMETER
		{
			name		= VesselIsType
			type		= VesselIsType
			vesselType 	= Probe
			title 		= #GENERIC_NT_PB
		}
		PARAMETER
		{
			name	= HasCrew
			type	= HasCrew
			minCrew	= 0
			maxCrew	= 0
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = LANDED
			title = #PlanetSampleReturn_9
			completeInSequence 	= true
		}
		PARAMETER
		{
			name 				= CollectSpaceScience
			type 				= CollectScience
			subject 			= @ScienceList
			recoveryMethod 		= Recover
			rewardFunds 		= @KerbalCareerContracts:baseComp * 0.5
			completedMessage 	= #PlanetSampleReturn_10
			title 				= #PlanetSurfaceScience_11
		}
		PARAMETER
		{
			name 					= ReturnHome
			type 					= ReturnHome
			title 					= #PlanetSampleReturn_12
			completeInSequence 		= true
			disableOnStateChange 	= true
		}
		PARAMETER
		{
			name = RecoverVessel
			type = RecoverVessel
			completeInSequence 	= true
			title = #PlanetSampleReturn_13
		}	

	}

	

 
}