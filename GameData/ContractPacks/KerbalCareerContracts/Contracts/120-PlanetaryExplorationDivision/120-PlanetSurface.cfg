// Contract Objectives:
//		1) Send a probe to the surface of the planet
//		2) Send a probe to the surface of any moons with a surface
//
//------------------------------------------------------------------------------------------------------------------------

CONTRACT_TYPE
{
	name				= PlanetSurface
	sortKey				= 120
	group				= Planetary Exploration Division
	agent				= Planetary Exploration Division
	title				= #PlanetSurface_1
	genericTitle		= #PlanetSurface1
	synopsis			= #PlanetSurface_2
	description			= #PlanetSurface_3
	genericDescription 	= #PlanetSurface_4
	minExpiry			= 5.0
	maxExpiry			= 100.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	completedMessage	= #PlanetSurface_5
	maxCompletions		= 1
	maxSimultaneous		= 1
	//
	targetBody			= @/targetBodyValid1
	//
	// Contract Reweards
	// Possible values are: Trivial , Significant , Exceptional 
	//
	prestige			= Trivial									
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.5
	rewardReputation	= @KerbalCareerContracts:rewardRep * 1.2	
	rewardFunds			= @KerbalCareerContracts:baseComp * 1.75
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.5
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------

	DATA_EXPAND
	{
		type 				= CelestialBody
		targetBody1			= @KerbalCareerContracts:systemSurface
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}		
	DATA
	{
		type				= List<CelestialBody>
		requiredValue		= false
		targetList		 	= @KerbalCareerContracts:nextBodies
		reachedList			= @KerbalCareerContracts:reachedPlanets	
		pMoonList			= @/targetBody.Children().Where(cb => cb.HasSurface() )							// Find the list of moons in orbit around the planet
		
	}

	DATA
	{
		type				= int
		requiredValue 		= false
		numHomeMoons		= @/KerbalCareerContracts:homeMoons.Count()
		numMoonsOrbit		= @/KerbalCareerContracts:orbitedMoons.Count()
		numMoons			= @/pMoonList.Count()								// Find the number of Moons in orbit around the planet
			
	}			
    DATA
    {
		type 			= ScienceRecoveryMethod
        hidden 			= true
        recoveryMethod 	= Transmit
    }
	
	// Contract Requirements --------------------------------------------------------------------------------------------------
	
	REQUIREMENT
	{
		name 					= Expression
		type 					= Expression
		checkOnActiveContract 	= false
		expression 				= @/numHomeMoons == @/numMoonsOrbit
		title 					= #GENERIC_REQ_7
	}
	REQUIREMENT
	{
		name 		= NextPlanetCheck
		type 		= Expression
		expression 	= (@/targetList.Contains(@/targetBodyValid1) || @/reachedList.Contains(@/targetBodyValid1))  == true
		title 		= #GENERIC_REQ_8
	}
	REQUIREMENT
	{
		name 			= Orbit
		type			= Orbit
		checkType 		= UNMANNED
		title			= #GENERIC_REQ_3
    }

	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			PED_Contracts	= $PED_Contracts + 1
		}
	}
	
	// Contract Parameters ----------------------------------------------------------------------------------------------------
	
	// Objective #1: Orbit the target Planet
	PARAMETER
	{
		name = PlanetSurfaceProbe
		type = VesselParameterGroup
		title = #PlanetSurface_7
		define = PlanetSurfaceProbe
		disableOnStateChange = false
		completedMessage = #PlanetSurface_8
		rewardFunds = @/KerbalCareerContracts:baseComp * 0.6

		PARAMETER
		{
			name	= NewVessel
			type	= NewVessel
			title	= #GENERIC_NV
		}
		PARAMETER
		{
			name		= VesselIsType
			type		= VesselIsType
			vesselType 	= Probe
			title 		= #GENERIC_NT_PB
		}
		PARAMETER
		{
			name	= HasCrew
			type	= HasCrew
			minCrew	= 0
			maxCrew	= 0
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = LANDED
			title = #PlanetSurface_9
			completeInSequence 	= true
		}
		PARAMETER
		{
			name			= CollectScience
			type			= CollectScience
			optional		= true
			situation		= SrfLanded
			situation		= SrfSplashed
			recoveryMethod	= Transmit
			title 			= #PlanetSurface_10
			completeInSequence = true
		}
	}
	// Objective #2: Land on the surface of any moons
	PARAMETER
	{
		REQUIREMENT
		{
			name 		= PlanetMoonCheck
			type 		= Expression
			expression 	= @/pMoonList.Count() >= 1
			title		= #PlanetSurface_11
		}	
	
		name = PlanetMoonSurface
		type = VesselParameterGroup
		title = #PlanetSurface_12
		define = PlanetMoonSurface
		disableOnStateChange = false
		completedMessage = #PlanetSurface_13
		rewardFunds = @/KerbalCareerContracts:baseComp * 0.6

		PARAMETER
		{
			name		= VesselIsType
			type		= VesselIsType
			vesselType 	= Probe
			title 		= #GENERIC_NT_PB
		}
		PARAMETER
		{
			name	= HasCrew
			type	= HasCrew
			minCrew	= 0
			maxCrew	= 0
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = LANDED
			title = #PlanetSurface_14
			targetBody 	= @/PlanetMoonOrbit/moonTarget
			completeInSequence 	= true
		}
		PARAMETER
		{
			name			= CollectScience
			type			= CollectScience
			optional		= true
			situation		= SrfLanded
			situation		= SrfSplashed
			recoveryMethod	= Transmit
			title 			= #PlanetSurface_15
			targetBody 	= @/PlanetMoonOrbit/moonTarget
			completeInSequence = true
		}
		ITERATOR
		{
			type			= CelestialBody
			moonTarget		= @/pMoonList
			
			REQUIREMENT
			{
				type = Expression
				expression = @../pMoonList.Count() > 0
			}
		}

    }
	

 
}