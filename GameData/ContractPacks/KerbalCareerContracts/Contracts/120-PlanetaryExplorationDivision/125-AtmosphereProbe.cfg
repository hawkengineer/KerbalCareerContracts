
CONTRACT_TYPE
{
	name 			= AtmosphereProbe
	sortKey 		= 125
	group 			= Planetary Exploration Division
	agent			= Planetary Exploration Division
	title			= #AtmosphereProbe_1
	genericTitle	= #AtmosphereProbe1
	topic			= Exploration
	synopsis 		= #AtmosphereProbe_2
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 50
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= @/targetBodyValid1
	
	description 		= #AtmosphereProbe_5
	genericDescription 	= #AtmosphereProbe5
	completedMessage	= #AtmosphereProbe_4
		
	// Contract Reweards
	prestige			= Trivial										// Possible values are: Trivial , Significant , Exceptional 
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.1
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.75	
	rewardFunds			= @KerbalCareerContracts:baseComp * 1.0
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.4							
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA
	{
		type = List<CelestialBody>
		requiredValue = false
		targetBodyList = @KerbalCareerContracts:homeSystemPlanets
		targetBody1 = @/targetBodyList.Where(cb => !cb.HasSurface() && cb.HasAtmosphere())
	}
	DATA:NEEDS[BeyondHome]
	{
		type = List<CelestialBody>
		requiredValue = false
		targetBody1 = @/targetBodyList.Where(cb => !cb.HasSurface() && cb.HasAtmosphere()).Concat(@KerbalCareerContracts:tempGas)
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		uniquenessCheck		= CONTRACT_ACTIVE
		targetBodyValid1	= @/targetBody1.SelectUnique()
	}	
	DATA
	{
		type = double
		AtmLoLimit = @/targetBody.FlyingAltitudeThreshold() / 1000
		AtmHiLimit = @/targetBody.AtmosphereAltitude() / 1000
		Alt90 		= @targetBody.AtmosphereAltitude() * 0.90 /1000
		Alt80 		= @targetBody.AtmosphereAltitude() * 0.80 /1000
		Alt70 		= @targetBody.AtmosphereAltitude() * 0.70 /1000
		Alt60 		= @targetBody.AtmosphereAltitude() * 0.60 /1000
		Alt50 		= @targetBody.AtmosphereAltitude() * 0.50 /1000
		Alt40 		= @targetBody.AtmosphereAltitude() * 0.40 /1000
		Alt30 		= @targetBody.AtmosphereAltitude() * 0.30 /1000
		Alt20 		= @targetBody.AtmosphereAltitude() * 0.20 /1000
		Alt10 		= @targetBody.AtmosphereAltitude() * 0.10 /1000
		title = #AtmosphereProbe_MSG1
	}		
	DATA
	{
		type = List<float>
		AltStep = [ 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90]
		title = #AtmosphereProbe_MSG12
	}
	DATA
	{
		type = double
		SpaceThreshold 	= @/targetBody.SpaceAltitudeThreshold()
		AtmLimit 		= @/targetBody.AtmosphereAltitude()
		title 			= #AtmosphereProbe_MSG1
	}		
 	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true
        recoveryMethod = Transmit
    }
	DATA
	{
		type			= List<ScienceExperiment>
		hidden			= true
		experiment1		= AvailableExperiments(@/targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
	}		
	DATA
	{
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
		//
		type			= List<ScienceSubject>
        hidden = true
		//
		scienceList1	= AllScienceSubjectsByBodyExperiment([@targetBody], @experiment1)
		scienceList2	= @scienceList1.Where(sc => sc.Situation() == FlyingHigh )
		scienceList3	= @scienceList2.Where(sc => sc.RemainingScience() / sc.TotalScience() >= 0.1 )										// Find where 10% remains
		scienceList4	= @scienceList3.Random(2)		
		
		scienceList5	= AllScienceSubjectsByBodyExperiment([@targetBody], @experiment1)
		scienceList6	= @scienceList1.Where(sc => sc.Situation() == FlyingLow )
		scienceList7	= @scienceList2.Where(sc => sc.RemainingScience() / sc.TotalScience() >= 0.1 )										// Find where 10% remains
		scienceList8	= @scienceList3.Random(2)		
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name	 	= Orbit
		type 		= Orbit
		checkType 	= UNMANNED
		title 		= #AtmosphereProbe_MSG2
	}
	REQUIREMENT
	{
		type = Expression
		title = #AtmosphereProbe_MSG3
		expression = @/scienceList4.Count() >= 1
	}
	REQUIREMENT
	{
		type = Expression
		title = #AtmosphereProbe_MSG4
		expression = @/scienceList8.Count() >= 1
	}
	
	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			PED_Contracts	= $PED_Contracts + 1
		}
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	// Objective #1: Send a mission to collect the identified science measurements
	PARAMETER
	{
		name 	= AtmosphereProbe
		type	= VesselParameterGroup
		title 	= #AtmosphereProbe_7
		completedMessage = #AtmosphereProbe_8
		//rewardFunds = @/KerbalCareerContracts:baseComp * 0.1
		//
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Probe
			title = #AtmosphereProbe_MSG5
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = #AtmosphereProbe_MSG6
			hideChildren = true
		}
		PARAMETER
        {
            name 		= PlanetOrbit
            type 		= ReachState
			situation 	= ORBITING
			situation	= ESCAPING
			title = #AtmosphereProbe_MSG7
		}
		PARAMETER
		{
			name 		= suborbital
			type 		= ReachState
			situation 	= SUB_ORBITAL
			title 		= #AtmosphereProbe_MSG8
			completeInSequence = true
		}
		PARAMETER
		{
			name		= FlyingHigh
			type		= ReachState
			situation	= FLYING
			title 		= #AtmosphereProbe_MSG9
			completeInSequence = true
	
			PARAMETER
			{
				name 				= CollectHighScience
				type 				= CollectScience
				experiment			= @ScienceID.Experiment()
				situation			= @ScienceID.Situation()
				recoveryMethod 		= @/recoveryMethod
				rewardFunds 		= @KerbalCareerContracts:baseComp * 0.1
				completedMessage 	= #AtmosphereProbe_9
				title 				= #AtmosphereProbe_10
				ITERATOR
				{
					type = ScienceSubject
					ScienceID = @/scienceList4
					REQUIREMENT
					{
						type = Expression
						expression = @../scienceList4.Count() > 0
					}	
				}
			}
		}
		PARAMETER
		{
			name				= VesselDestroyed
			type 				= VesselDestroyed
			mustImpactTerrain	= false
			title				= #AtmosphereProbe_MSG13
		}
		// ----------------------------------------- Optional Objectives
		//
		PARAMETER
		{
			name		= FlyingLow
			type		= ReachState
			situation	= FLYING
			maxAltitude = @/targetBody.FlyingAltitudeThreshold()
			title 		= #AtmosphereProbe_MSG10
			optional	= true
	
			PARAMETER
			{
				name 				= CollectLowScience
				type 				= CollectScience
				optional			= true
				experiment			= @ScienceID.Experiment()
				situation			= @ScienceID.Situation()
				recoveryMethod 		= @/recoveryMethod
				rewardFunds 		= @KerbalCareerContracts:baseComp * 1.25
				completedMessage 	= #AtmosphereProbe_9
				title 				= #AtmosphereProbe_10
				ITERATOR
				{
					type = ScienceSubject
					ScienceID = @/scienceList8
					REQUIREMENT
					{
						type = Expression
						expression = @../scienceList8.Count() > 0
					}	
				}
			}
		}
		PARAMETER
		{
			name = ReachAltitude
			type = ReachState
			situation = FLYING
			maxAltitude = @/targetBody.AtmosphereAltitude() * @altgoal
			optional = true
			title = #AtmosphereProbe_MSG11
			completedMessage = Congratulations! Our probe have passed the target altitude, how much longer will it survived!
			rewardFunds = @KerbalCareerContracts:baseComp * 0.25  
			
			ITERATOR
			{
				type 		= float 
				altgoal 	= @/AltStep
				REQUIREMENT
				{
					type = Expression
					expression = @../AltStep.Count() > 0
				}	
			}			
		}	

	}

}	
		
	