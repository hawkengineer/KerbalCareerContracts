CONTRACT_TYPE
{
	name				= SunOrbit
	sortKey				= 80
	group				= Planetary Exploration Division
	agent				= Planetary Exploration Division
	title				= #SunOrbit_1
	genericTitle		= #SunOrbit1
	synopsis			= #SunOrbit_2
	description			= #SunOrbit_3
	genericDescription 	= #SunOrbit_4
	minExpiry			= 5.0
	maxExpiry			= 100.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	completedMessage	= #SunOrbit_5
	maxCompletions		= 1
	maxSimultaneous		= 1
	//
	targetBody			= Sun()
	//
	// Contract Reweards
	// Possible values are: Trivial , Significant , Exceptional 
	//
	prestige			= Trivial									
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.5
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.75	
	rewardFunds			= @KerbalCareerContracts:baseComp * 0.8
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.5
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------


	DATA
	{
		type = double
		SpaceThreshold 	= @/targetBody.SpaceAltitudeThreshold()
		AtmLimit 		= @/targetBody.AtmosphereAltitude()
		minOrbit		= @/SpaceThreshold * 1.3
		//
		targetAlt1		= @/minOrbit / 1000
		title 			= #SunOrbit_6
	}
	DATA
	{
		type				= List<CelestialBody>
		requiredValue		= false
		targetList		 	= @KerbalCareerContracts:nextBodies
		reachedList			= @KerbalCareerContracts:reachedPlanets	
		pMoonList			= @targetBody.Children()							// Find the list of moons in orbit around the planet
		
	}
	DATA
	{
		type				= int
		requiredValue 		= false
		numHomeMoons		= @/KerbalCareerContracts:homeMoons.Count()
		numMoonsOrbit		= @/KerbalCareerContracts:orbitedMoons.Count()
		numMoons			= @/pMoonList.Count()								// Find the number of Moons in orbit around the planet
			
	}
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true
        recoveryMethod = Transmit
    }	
 	DATA
	{
		type			= List<ScienceExperiment>
		hidden			= true
		experiment1		= AvailableExperiments(@/targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
	}	
	DATA
	{
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
		//
		type			= List<ScienceSubject>
        hidden = true
		scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiment1)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.Situation() == InSpaceHigh)
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.RemainingScience() / s.TotalScience() >= 0.1)
        scienceList = @scienceSubjectsTemp3.Random(4)
	}	
	
	// Contract Requirements --------------------------------------------------------------------------------------------------
	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @/numHomeMoons == @/numMoonsOrbit
		title = #GENERIC_REQ_7
	}
		REQUIREMENT
	{
		type = Expression
		title = #GENERIC_Science
		expression = @/scienceList.Count() >= 1
	}

	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			PED_Contracts	= $PED_Contracts + 1
		}
	}
	
	// Contract Parameters ----------------------------------------------------------------------------------------------------
	
	// Objective #1: Orbit the Sun 
	PARAMETER
	{
		name = SunOrbitProbe
		type = VesselParameterGroup
		title = #SunOrbit_7
		define = SunOrbitProbe
		completedMessage = #SunOrbit_8

		PARAMETER
		{
			name	= NewVessel
			type	= NewVessel
			title	= #GENERIC_NV
		}
		PARAMETER
		{
			name		= VesselIsType
			type		= VesselIsType
			vesselType 	= Probe
			title 		= #GENERIC_NT_PB
		}
		PARAMETER
		{
			name	= HasCrew
			type	= HasCrew
			minCrew	= 0
			maxCrew	= 0
		}
		PARAMETER
        {
            name 		= OrbitPlanet
            type 		= Orbit
			situation 	= ORBITING
			minAltitude = @/minOrbit
			title 		= #SunOrbit_9
			completeInSequence = true
		}
		PARAMETER
		{
			name 			= Duration
			type			= Duration
			duration		= 1h			
			preWaitText		= #GENERIC_PreText
			waitingText		= #GENERIC_WaitText
			completionText 	= #GENERIC_CompText
			completeInSequence = true
		}
		PARAMETER
		{
			name		= HasResource
			type		= HasResource
			resource	= ElectricCharge
			minQuantity = 5
			title		= #GENERIC_Power
			completeInSequence = true
		}
		PARAMETER
		{
			name 				= CollectScience
			type 				= CollectScience
			subject 			= @scienceID
			recoveryMethod 		= @/recoveryMethod
			rewardFunds 		= @KerbalCareerContracts:baseComp * 0.1
			completedMessage 	= #SunOrbit_10
			title 				= #SunOrbit_11
			ITERATOR
			{
				type = ScienceSubject
				scienceID = @/scienceList
				REQUIREMENT
				{
					type = Expression
					expression = @../scienceList.Count() > 0
				}
			}
		}		
	}
 
}