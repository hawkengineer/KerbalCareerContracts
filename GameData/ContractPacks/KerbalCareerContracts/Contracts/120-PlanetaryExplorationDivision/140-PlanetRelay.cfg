// Contract Objectives:
//		1) Send a comm relay satellite to orbit the planet
//
//------------------------------------------------------------------------------------------------------------------------

CONTRACT_TYPE
{
	name				= PlanetRelay
	sortKey				= 140
	group				= Planetary Exploration Division
	agent				= Planetary Exploration Division
	title				= #PlanetRelay_1
	genericTitle		= #PlanetRelay1
	synopsis			= #PlanetRelay_2
	description			= #PlanetRelay_3
	genericDescription 	= #PlanetRelay_4
	minExpiry			= 5.0
	maxExpiry			= 100.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	completedMessage	= #PlanetRelay_5
	maxCompletions		= 0
	maxSimultaneous		= 1
	//
	targetBody			= @/targetBodyValid1
	//
	// Contract Reweards
	// Possible values are: Trivial , Significant , Exceptional 
	//
	prestige			= Trivial									
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.5
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.8	
	rewardFunds			= @KerbalCareerContracts:baseComp * 1.2
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.25
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------

	DATA_EXPAND
	{
		type 				= CelestialBody
		targetBody1			= @KerbalCareerContracts:homeSystemPlanets
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}		

	DATA
	{
		type = double
		targetAlt1 		= @/targetBody.Radius() * 1.1 / 1000
		relayLimit		= @/targetBody.Radius() * 1.1
		title 			= #PlanetRelay_11
	}
	DATA
	{
		// Assumes a level 3 tracking station
		type 			= double
		targetSMA 		= @/targetBody.SemiMajorAxis()
		minRelayPower	= (@/targetSMA * @/targetSMA) / 250000000000
		antRelayPower 	= @/minRelayPower / 1000 / 1000 / 1000
	}	
	DATA
	{
		type 		= List<CelestialBody>
		validSearch	= [@/targetBody]
	}
	
	DATA
	{
		type			= List<Vessel>
		hidden			= true
		requiredValue 	= false
		bodyVessels		= AllVessels().Where(v => @validSearch.Contains(v.CelestialBody()))
		orbitVessels	= @bodyVessels.Where(v => v.IsOrbiting())
		validVessels	= @orbitVessels.Where(v => v.Orbit().Apoapsis() < @/maxAp && v.Orbit().Inclination() <= 3)
		validRelays		= @validVessels.Where(v => v.AntennaRelayPower() >= @/minRelayPower && v.VesselType() == Relay)
	}	
	
	
	// Contract Requirements --------------------------------------------------------------------------------------------------
	
	REQUIREMENT
	{
		name 			= Orbit
		type			= Orbit
		checkType 		= UNMANNED
		title			= #GENERIC_REQ_3
    }
	REQUIREMENT
	{
		name		= Expression2
		type 		= Expression
		title 		= #PlanetRelay_6
		expression 	= @/validRelays.Count() < 3
	}
	

	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			PED_Contracts	= $PED_Contracts + 1
		}
	}
	
	// Contract Parameters ----------------------------------------------------------------------------------------------------
	
	// Objective #1: Orbit the target Planet
	PARAMETER
	{
		name = PlanetRelayProbe
		type = VesselParameterGroup
		title = #PlanetRelay_7
		define = PlanetRelayProbe
		disableOnStateChange = false
		completedMessage = #PlanetRelay_8
		rewardFunds = @/KerbalCareerContracts:baseComp * 0.5

		PARAMETER
		{
			name	= NewVessel
			type	= NewVessel
			title	= #GENERIC_NV
		}
		PARAMETER
		{
			name		= VesselIsType
			type		= VesselIsType
			vesselType 	= Relay
			title 		= #GENERIC_NT_RY
		}
		PARAMETER
		{
			name	= HasCrew
			type	= HasCrew
			minCrew	= 0
			maxCrew	= 0
		}
		PARAMETER
	    {
		    name 			= HasAntenna
		    type 			= HasAntenna
		    minAntennaPower = @/minRelayPower
		    antennaType 	= RELAY
			title			= #PlanetRelay_9
		}
		PARAMETER
        {
            name 				= RelayMoon
            type 				= Orbit
			situation 			= ORBITING
            minPeA 				= @/relayLimit
            maxEccentricity 	= 0.004
			title 				= #PlanetRelay_10
		}
		PARAMETER
		{
			name 			= Duration
			type 			= Duration
			duration 		= 2h
			preWaitText 	= #HomeCommRelay_12
			waitingText 	= #HomeCommRelay_13
			completionText 	= #HomeCommRelay_14
		}		
	}
}