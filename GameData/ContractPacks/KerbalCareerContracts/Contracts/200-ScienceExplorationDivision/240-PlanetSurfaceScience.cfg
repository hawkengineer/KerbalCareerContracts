// Goal for this contract is collect science on the surface ofthe planet / moon.  
//
CONTRACT_TYPE
{
	name 			= PlanetSurfaceScience
	sortKey 		= 240
	group 			= Science Exploration Division
	agent			= Science Exploration Division
	title			= #PlanetSurfaceScience_1
	genericTitle	= #PlanetSurfaceScience_2
	topic			= Exploration
	synopsis 		= #PlanetSurfaceScience_3
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 100
	maxCompletions 	= 0
	maxSimultaneous = 4
	targetBody		= @/targetBodyValid1
	
	description 		= #PlanetSurfaceScience_4
	genericDescription 	= #PlanetSurfaceScience_5
	completedMessage	= #PlanetSurfaceScience_6
		
	// Contract Reweards
	prestige			= Trivial										// Possible values are: Trivial , Significant , Exceptional 
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.1
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.75	
	rewardFunds			= @KerbalCareerContracts:baseComp * 1.5
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.6							
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
	DATA
	{
		type				= List<CelestialBody>
		hidden				= true
		Landed				= @KerbalCareerContracts:landedList
	}

	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		uniquenessCheck	 	= CONTRACT_ACTIVE
		targetBodyValid1	= @KerbalCareerContracts:landedList.Random()
	}		
 	DATA
	{
		type			= List<ScienceExperiment>
		hidden			= true
		experiment1		= AvailableExperiments(@/targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
	}	
	DATA
	{
		type 			= Biome
        hidden = true
		biometemp		= @targetBody.Biomes().Where(sc => sc.RemainingScience() > 10).Random()
	}
	DATA
	{
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
		//
		type			= List<ScienceSubject>
        hidden = true
		//
		surfaceScienceTemp1		= AllScienceSubjectsByBiomeExperiment([@/biometemp], @experiment1 )
		surfaceScienceTemp2		= @surfaceScienceTemp1.Where( s => s.Situation() == SrfLanded || s.Situation() == SrfSplashed)
		surfaceScienceTemp3		= @surfaceScienceTemp2.Where( s => s.RemainingScience() / s.TotalScience() >= 0.1)
		surfaceScienceList		= @surfaceScienceTemp3.Random(6)
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		type = Expression
		title = #PlanetSurfaceScience_7
		expression = @/surfaceScienceList.Count() >= 1
	}
	REQUIREMENT
	{
		name	 	= Landing
		type 		= Landing
		checkType 	= UNMANNED
		title 		= #PlanetSurfaceScience_8
	}
	REQUIREMENT:NEEDS[SCANsat]
	{
		name		= SCANsatCoverage
		type		= SCANsatCoverage
		minCoverage = 75
		scanType 	= Biome
		title 		= #PlanetSurfaceScience_8b
	}
	
	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			SED_Contracts	= $SED_Contracts + 1
		}
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
    {
		name 				= CollectSpaceScience
		type 				= CollectScience
        subject 			= @scienceID
        recoveryMethod 		= Ideal
		rewardFunds 		= @KerbalCareerContracts:baseComp * 0.5
		completedMessage 	= #PlanetSurfaceScience_9
		title 				= #PlanetSurfaceScience_10
 		ITERATOR
        {
            type = ScienceSubject
            scienceID = @/surfaceScienceList
 			REQUIREMENT
			{
				type = Expression
				expression = @../surfaceScienceList.Count() > 0
			}
		}
    }

}	
		
	