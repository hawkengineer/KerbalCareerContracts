// Goal for this contract is collect science around the home planet.  
//
CONTRACT_TYPE
{
	name 			= MoonScience
	sortKey 		= 160
	group 			= Science Exploration Division
	agent			= Science Exploration Division
	title			= #MoonScience_1
	genericTitle	= #MoonScience_2
	topic			= Exploration
	synopsis 		= #MoonScience_3
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 100
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= @/targetBodyValid1
	
	description 		= #MoonScience_4
	genericDescription 	= #MoonScience_5
	completedMessage	= #MoonScience_6
		
	// Contract Reweards
	prestige			= Trivial										// Possible values are: Trivial , Significant , Exceptional 
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.1
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.2	
	rewardFunds			= @KerbalCareerContracts:baseComp * 0.7
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.4							
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration

	DATA_EXPAND
	{
		type 				= CelestialBody
		targetBody1			= @KerbalCareerContracts:homeMoons
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}		

 	DATA
	{
		type			= List<ScienceExperiment>
		requiredValue	= true
		experiment1		= AvailableExperiments(@/targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		title			= Find available experiments to run on the moon
	}	

	DATA
	{
		type = int
		selectRoll = Random(1, 2)
		requiredValue = true
		title			= Random select either surface or space science
		
		//
	}
	DATA
	{
		type = string
		requiredValue = true
		scienceType = @/selectRoll == 1 ? "Space Science" : "Surface Science"
		title 	= Select either surface or space science
	}

	
	DATA
	{
		type 			= Biome
		requiredValue	 = true
		uniquenessCheck = CONTRACT_ACTIVE	
		biometemp		= @targetBody.Biomes().Where(sc => sc.RemainingScience() > 10).SelectUnique()
		title			= Identify target biome where there is more than 10 science remaining
	}
	
	DATA
	{
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
		//
		type			= List<ScienceSubject>
        hidden 			= false
		requiredValue 	= false
		//
		// Identify science to retrieve in space around the moon
		//
		scienceListTemp1		= @/selectRoll == 1 ? AllScienceSubjectsByBodyExperiment([@targetBody], @experiment1) : AllScienceSubjectsByBiomeExperiment([@/biometemp], @experiment1 )
		scienceListTemp2		= @/selectRoll == 1 ? @scienceListTemp1.Where(s => s.Situation() == InSpaceLow || s.Situation() == InSpaceHigh) : @scienceListTemp1.Where( s => s.Situation() == SrfLanded || s.Situation() == SrfSplashed)
		scienceListTemp3		= @/scienceListTemp2.Where(s => s.RemainingScience() / s.TotalScience() >= 0.1)
		scienceListTemp4		= @/scienceListTemp3.Random(4)
		//
		
		spaceScienceTemp1		= AllScienceSubjectsByBodyExperiment([@targetBody], @experiment1)
		spaceScienceTemp2		= @spaceScienceTemp1.Where(s => s.Situation() == InSpaceLow || s.Situation() == InSpaceHigh)
		spaceScienceTemp3		= @spaceScienceTemp2.Where(s => s.RemainingScience() / s.TotalScience() >= 0.1)
		spaceScienceList		= @spaceScienceTemp3.Random(4)
		//
		// Identify science to retrieve from the surface
		//
		surfaceScienceTemp1		= AllScienceSubjectsByBiomeExperiment([@/biometemp], @experiment1 )
		surfaceScienceTemp2		= @surfaceScienceTemp1.Where( s => s.Situation() == SrfLanded || s.Situation() == SrfSplashed)
		surfaceScienceTemp3		= @surfaceScienceTemp2.Where( s => s.RemainingScience() / s.TotalScience() >= 0.1)
		surfaceScienceList		= @surfaceScienceTemp3.Random(4)
		
		title					= Select science list for either space science or surface science
	}
	
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name	= Any
		type 	= Any
		
			REQUIREMENT
			{
				type = Expression
				title = #MoonScience_7
				expression = @/spaceScienceList.Count() >= 1
			}
			REQUIREMENT
			{
				type = Expression
				title = #MoonScience_7
				expression = @/surfaceScienceList.Count() >= 1
			}
			REQUIREMENT
			{
				type = Expression
				title = #MoonScience_7
				expression = @/scienceListTemp4.Count() >= 1
			}


	}		
	REQUIREMENT
	{
		name	 	= Landing
		type 		= Landing
		checkType 	= UNMANNED
		title 		= #MoonScience_8
	}
	REQUIREMENT
	{
		name	 	= Orbit
		type 		= Orbit
		checkType 	= UNMANNED
		title 		= #MoonScience_8a
	}
	REQUIREMENT:NEEDS[SCANsat]
	{
		name		= SCANsatCoverage
		type		= SCANsatCoverage
		minCoverage = 75
		scanType 	= Biome
	}
	
	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			SED_Contracts	= $SED_Contracts + 1
		}
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
    {
		REQUIREMENT
		{
			name 		= MoonSpaceScience
			type		= Expression
			expression	= @/spaceScienceList.Count() >= 1
			expression	= @/selectRoll == 1
		}

		name 				= CollectSpaceScience
		type 				= CollectScience
        subject 			= @scienceID
        recoveryMethod 		= Ideal
		rewardFunds 		= @KerbalCareerContracts:baseComp * 0.15
		completedMessage 	= #MoonScience_9
		title 				= #MoonScience_10
 		ITERATOR
        {
            type = ScienceSubject
            scienceID = @/spaceScienceList
 			REQUIREMENT
			{
				type = Expression
				expression = @../spaceScienceList.Count() > 0
			}
		}
    }
	PARAMETER
    {
	
		REQUIREMENT
		{
			name 		= MoonSurfaceScience
			type		= Expression
			expression	= @/surfaceScienceList.Count() >= 1
			expression	= @/selectRoll == 2
		}
		name 				= CollectSurfaceScience
		type 				= CollectScience
        subject 			= @surfaceID
        recoveryMethod 		= Ideal
		rewardFunds 		= @KerbalCareerContracts:baseComp * 0.15
		completedMessage 	= #MoonScience_11
		title 				= #MoonScience_12
 		ITERATOR
        {
            type = ScienceSubject
            surfaceID = @/surfaceScienceList
 			REQUIREMENT
			{
				type = Expression
				expression = @../surfaceScienceList.Count() > 0
			}
		}
	}

}	
		
	