// Goal for this contract is collect science around the home planet.  
//
CONTRACT_TYPE
{
	name 			= SurfaceScience
	sortKey 		= 120
	group 			= Science Exploration Division
	agent			= Science Exploration Division
	title			= #SurfaceScience_1
	genericTitle	= #SurfaceScience_2
	topic			= Exploration
	synopsis 		= #SurfaceScience_3
	cancellable		= false
	declinable 		= false
	autoAccept		= false
	minExpiry		= 5
	maxExpiry		= 100
	maxCompletions 	= 0
	maxSimultaneous = 1
	targetBody		= HomeWorld()
	
	description 		= #SurfaceScience_4
	genericDescription 	= #SurfaceScience_5
	completedMessage	= #SurfaceScience_6
		
	// Contract Reweards
	prestige			= Trivial										// Possible values are: Trivial , Significant , Exceptional 
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.1
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.2	
	rewardFunds			= @KerbalCareerContracts:baseComp * 0.5
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.25							
	
	// ================================================================================================================
	//
	// ----------------------------------------------------------------------------------------------------------------
	// DATA Contract Configuration
	//
 	DATA
	{
		type			= List<ScienceExperiment>
		hidden			= true
		experiment1		= AvailableExperiments(@/targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
	}	

	DATA
	{
		type = int
		selectRoll = Random(1, 2)
		//
	}
	DATA
	{
		type 			= Biome
        hidden = true
		uniquenessCheck = CONTRACT_ACTIVE	
		biometemp		= @targetBody.Biomes().Where(sc => sc.RemainingScience() > 10).SelectUnique()
	}

	DATA
	{
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
		//
		type			= List<ScienceSubject>
        hidden = true
		//
		scienceList1	= AllScienceSubjectsByBiomeExperiment([@/biometemp], @experiment1 )
		scienceList2	= @scienceList1.Where(sc => sc.RemainingScience() / sc.TotalScience() >= 0.1 )										// Find where 10% remains
		scienceList3	= @scienceList2.Where(sc => (sc.Situation() == SrfLanded || sc.Situation() == SrfSplashed) && !sc.Biome().IsKSC() )
		scienceList4	= @scienceList3.Random(4)

		scienceList5	= AllScienceSubjectsByBiomeExperiment([@/biometemp], @experiment1 )
		scienceList6	= @scienceList1.Where(sc => sc.RemainingScience() / sc.TotalScience() >= 0.1 )										// Find where 10% remains
		scienceList7	= @scienceList2.Where(sc => sc.Situation() == FlyingLow || sc.Situation() == FlyingHigh)
		scienceList8	= @scienceList3.Random(4)		
		

	}
	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//
	REQUIREMENT
	{
		name	= Any
		type 	= Any
		
			REQUIREMENT
			{
				type = Expression
				title = #SurfaceScience_7
				expression = @/scienceList4.Count() >= 1
			}
			REQUIREMENT
			{
				type = Expression
				title = #SurfaceScience_7
				expression = @/scienceList8.Count() >= 1
			}
	}		
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = ProbeOrbit
		title = #SurfaceScience_8
	}

	// -----------------------------------------------------------------------------------------------------------------------
	//  Contract Parameters
	//
	PARAMETER
    {
		REQUIREMENT
		{
			name 		= SurfaceScience
			type		= Expression
			expression	= @/selectRoll == 1
		}

		name 				= CollectScience
		type 				= CollectScience
        subject 			= @scienceID
        recoveryMethod 		= Ideal
		rewardFunds 		= @KerbalCareerContracts:baseComp * 0.1
		completedMessage 	= #SurfaceScience_9
		title 				= #SurfaceScience_10
 		ITERATOR
        {
            type = ScienceSubject
            scienceID = @/scienceList4
 			REQUIREMENT
			{
				type = Expression
				expression = @../scienceList4.Count() > 0
			}
		}

    }
	
	PARAMETER
    {
	
		REQUIREMENT
		{
			name 		= FlyingScience
			type		= Expression
			expression	= @/selectRoll == 2
		}
		name 				= CollectScience
		type 				= CollectScience
        subject 			= @scienceID
        recoveryMethod 		= Ideal
		rewardFunds 		= @KerbalCareerContracts:baseComp * 0.1
		completedMessage 	= #SurfaceScience_9
		title 				= #SurfaceScience_10
 		ITERATOR
        {
            type = ScienceSubject
            scienceID = @/scienceList8
 			REQUIREMENT
			{
				type = Expression
				expression = @../scienceList8.Count() > 0
			}
		}

    }

}	
		
	