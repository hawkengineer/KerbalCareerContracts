/ Contract Objectives:
//		1)  Scout for surface base location
//		
//
//------------------------------------------------------------------------------------------------------------------------

CONTRACT_TYPE
{
	name				= SurfaceBaseRover
	sortKey				= 400
	group				= Colonization Exploration Division
	agent				= Colonization Exploration Division
	title				= #SurfaceBaseRover_1
	genericTitle		= #SurfaceBaseRover_2
	notes				= #SurfaceBaseRover_14
	synopsis			= #SurfaceBaseRover_3
	description			= #SurfaceBaseRover_4
	genericDescription 	= #SurfaceBaseRover_5
	minExpiry			= 2.0
	maxExpiry			= 5.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	completedMessage	= #SurfaceBaseRover_6
	maxCompletions		= 0
	maxSimultaneous		= 2
	//
	targetBody			= @/targetBody1
	//
	// Contract Reweards
	// Possible values are: Trivial , Significant , Exceptional 
	//
	prestige			= Trivial									
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.01
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.25 	
	rewardFunds			= @KerbalCareerContracts:baseComp * 1.25 
	advanceFunds		= @KerbalCareerContracts:baseAdv * 0.75 
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------
	//

	DATA:NEEDS[!SCANsat]
	{
		type 			= CelestialBody
		requiredValue 	= true
		uniquenessCheck = CONTRACT_ACTIVE
		targetBody1 	= LandedBodies().Where(b => b.IsOrbitalSurveyComplete() == true && b.HasSurface()).SelectUnique()
		title 			= #SurfaceBaseRover_7
	}

	DATA:NEEDS[SCANsat]
	{
 		type 			= CelestialBody
		requiredValue 	= true
		uniquenessCheck = GROUP_ACTIVE
		targetBody1 	= LandedBodies().Where(b => b.SCANsatCoverage("AltimetryHiRes") >= 80 && b.HasSurface()).SelectUnique()
		title 			= #SurfaceBaseRover_7
	}
	
	DATA
	{
        type 			= List<Vessel>
		requiredValue 	= false
		BaseList 		= AllVessels().Where(v => v.VesselType() == Base && v.IsLanded() == true && v.CelestialBody() == @/targetBody1)
    }
	
	DATA
	{
		type 			= List<Vessel>
		requiredValue 	= false
		RoverCheck 		= [BaseRover].Where(r => r.CelestialBody() == @/targetBody1)
	}

	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//	
	REQUIREMENT:NEEDS[!SCANsat]
	{
		name = MoonOrbitalSurvey
		type = PerformOrbitalSurvey
		title = #SurfaceBaseRover_18
	}
	
	REQUIREMENT:NEEDS[SCANsat]
	{
		name = MoonAltimetryHiRes
		type = SCANsatCoverage
		minCoverage = 85.0
		scanType = AltimetryHiRes
		title = #SurfaceBaseRover_19
	}
	REQUIREMENT:NEEDS[SCANsat]
	{
		name = MoonAltimetryLoRes
		type = SCANsatCoverage
		minCoverage = 85.0
		scanType = ResourceLoRes
		title = #SurfaceBaseRover_20
	}

	REQUIREMENT
	{
		name 		= NotHomeworld
		type 		= Expression
		expression 	= (!@/targetBody1.IsHomeWorld())
		title 		= #SurfaceBaseRover_8
	}

	REQUIREMENT
	{
		name 					= BaseCount
		type 					= Expression
		checkOnActiveContract 	= false
		expression 				= (@/BaseList.Count() == 0)
		title 					= #SurfaceBaseRover_9	
	}
	
	REQUIREMENT
	{
		name 					= RoverCount
		type 					= Expression
		checkOnActiveContract 	= false
		expression 				= (@/RoverCheck.Count() == 0)
		title 					= #SurfaceBaseRover_10
	}

	REQUIREMENT
	{
		name 		= ReturnFromSurface
		type 		= ReturnFromSurface
		checkType 	= MANNED
	}	
	
	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			CED_Contracts	= $CED_Contracts + 1
		}
	}
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			type			= bool
			SurfaceBase		= true
		}
	}

	
	// Contract Parameters ----------------------------------------------------------------------------------------------------
	//  
    PARAMETER
    {
		name 			= NewRover
		type 			= VesselParameterGroup
		title 			= #SurfaceBaseRover_12
		define 			= BaseRover
		notes 			= #SurfaceBaseRover_14
		targetBody 		= @/targetBody1
		
		PARAMETER
		{
			name 			= ReachState
			type 			= ReachState
			hideChildren 	= true
			title 			= #SurfaceBaseRover_13
			targetBody 		= @/targetBody1
			situation 		= LANDED
			situation 		= SPLASHED
		}
	
		PARAMETER
		{
			name 		= VesselIsType
			type 		= VesselIsType
			vesselType 	= Rover
		}
	}
	
	PARAMETER
	{
		name = Duration
		type = Duration
		completeInSequence = true
		duration = 2m
		preWaitText = #SurfaceBaseRover_15
		waitingText = #SurfaceBaseRover_16
		completionText = #SurfaceBaseRover_17
	} 
	
	
}	