/ Contract Objectives:
//		1)  Add a power module to existing space station
//		
//
//------------------------------------------------------------------------------------------------------------------------

CONTRACT_TYPE
{
	name				= SpaceStationPower
	sortKey				= 140
	group				= Colonization Exploration Division
	agent				= Colonization Exploration Division
	title				= #SpaceStationPower_1
	genericTitle		= #SpaceStationPower_2
	synopsis			= #SpaceStationPower_3
	description			= #SpaceStationPower_4
	genericDescription 	= #SpaceStationPower_5
	minExpiry			= 5.0
	maxExpiry			= 14.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	completedMessage	= #SpaceStationPower_6
	maxCompletions		= 0
	maxSimultaneous		= 1
	//
	targetBody			= @/targetBody1
	//
	// Contract Reweards
	// Possible values are: Trivial , Significant , Exceptional 
	//
	prestige			= Trivial									
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.01
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.5 	
	rewardFunds			= @KerbalCareerContracts:baseComp * 1.5 
	advanceFunds		= @KerbalCareerContracts:baseAdv * 1.0 
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------
	//
	DATA
    {
        type 			= Vessel
		uniquenessCheck = CONTRACT_ACTIVE
		requiredValue 	= true
        targetVessel1 	= AllVessels().Where(v => v.VesselType() == Station && v.FreeDockingPorts()>0 && v.CrewCapacity() > 0 && v.ResourceCapacity(ElectricCharge) < 5000 ).Random()
		title 			= #SpaceStationPower_8
    } 

	DATA
	{
		type 			= CelestialBody
		requiredValue 	= true
		targetBody1 	= @/targetVessel1.CelestialBody()
		hidden 			= true
	}

	DATA
	{	
		type 				= Double
		requiredValue 		= true
		title				= #SpaceStationPower_7
		tempStorage			= @/targetVessel1.ResourceCapacity(ElectricCharge)
		stationPwrStorage	= @/tempStorage <= 1 ? 600 : @/targetVessel1.ResourceCapacity(ElectricCharge)
		powerStorage		= Round(@/stationPwrStorage * Random(1.5, 3.0), 5.0)
		powerDelta			= Round(@/powerStorage - @/stationPwrStorage, 5.0)
		powerGen			= -8.0
	}

 	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//	
	REQUIREMENT
	{
		name = Any
		type = Any
	
		REQUIREMENT
		{
			name = PartModuleUnlocked
			type = PartModuleUnlocked
			
			partModule = ModuleDeployableSolarPanel
		}

		REQUIREMENT:NEEDS[NearFutureSolar]
		{
			name = PartModuleUnlocked
			type = PartModuleUnlocked
			
			partModule = ModuleCurvedSolarPanel
		}
		REQUIREMENT:NEEDS[Kopernicus]
		{
			name 		= PartModuleUnlocked
            type 		= PartModuleUnlocked
            partModule 	= KopernicusSolarPanel
		}
	}	
	REQUIREMENT
	{
		name = PartModuleUnlocked
		type = PartModuleUnlocked

		partModule = ModuleDockingNode
	}

	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			CED_Contracts	= $CED_Contracts + 1
		}
	}	
	// Contract Parameters ----------------------------------------------------------------------------------------------------
	//  
    PARAMETER
    {
        name 		= PowerModule
        type 		= VesselParameterGroup
        title 		= #SpaceStationPower_9
        notes 		= #SpaceStationPower_10
		define		= PowerModule
		dissassociateVesselsOnContractCompletion 	= true
		dissassociateVesselsOnContractFailure 		= true
		 
		PARAMETER
		{	
			name = NewVessel
			type = NewVessel
			title = #SpaceStationPower_11
			hideChildren = true
		}			

        //Check for a Docking Port
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			
			partModule = ModuleDockingNode
			minCount = 1
		}
		PARAMETER
		{
			name = PowerGenerationModule
			type = Any
			optional = false
			completeInSequence = true

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name 			= PowerGeneration
				type 			= PartValidation
				title 			= #SpaceStationPower_17
				hideChildren 	= true
				partModule 		= ModuleCurvedSolarPanel
				minCount		= 1
			}
			PARAMETER
			{
				name 			= PowerGeneration
				type 			= PartValidation
				title 			= #SpaceStationPower_17
				hideChildren 	= true
				partModule 		= ModuleDeployableSolarPanel
				minCount		= 1
			}
			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidationRTG
                type = PartValidation
                hideChildren = true
                title = #SpaceStationPower_17
                partModule = KopernicusSolarPanel
                minCount = 1
			}
		}
		PARAMETER
		{
			name = ResourceConsumption
			type = ResourceConsumption
			resource = ElectricCharge
			minRate = -8.0
			title = #SpaceStationPower_18
			hideChildren = false
		}		
		PARAMETER
		{
			name			= PowerStorage
			type			= HasResourceCapacity
			resource		= ElectricCharge
			minQuantity		= @/powerDelta
		}

		
		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous
			vessel = @/targetVessel1
			distance = 100
			title = #SpaceStationPower_13
		}

	}
    PARAMETER
    {
        name 		= PowerModuleDock
        type 		= VesselParameterGroup
        title 		= Dock Power Module to @/targetVessel1
		vessel 		= PowerModule
     
		PARAMETER
		{
			name 				= Docking
			type 				= Docking
			vessel 				= @/targetVessel1
			title 				= #SpaceStationPower_12
			hideChildren 		= true
			completeInSequence 	= true
		}		
	}
	//Begins a 1-day countdown. Station must be in orbit for 1 days for contract to complete
	PARAMETER
	{
		name 			= Duration
		type 			= Duration
		duration 		= 1d
		preWaitText 	= #SpaceStationPower_14
		waitingText 	= #SpaceStationPower_15
		completionText 	= #SpaceStationPower_16
		startCriteria 	= PARAMETER_COMPLETION
		parameter 		= PowerModuleDock
	}
	
}	