/ Contract Objectives:
//		1)  Surface Base - Moons
//		
//
//------------------------------------------------------------------------------------------------------------------------

CONTRACT_TYPE
{
	name				= MoonSurfaceBaseCore
	sortKey				= 420
	group				= Colonization Exploration Division
	agent				= Colonization Exploration Division
	title				= #SurfaceBaseCore_1
	genericTitle		= #SurfaceBaseCore_2
	synopsis			= #SurfaceBaseCore_3
	description			= #SurfaceBaseCore_4
	genericDescription 	= #SurfaceBaseCore_5
	minExpiry			= 2.0
	maxExpiry			= 7.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	completedMessage	= #SurfaceBaseCore_6
	maxCompletions		= 1
	maxSimultaneous		= 1
	//
	targetBody			= @/targetBodyValid1
	//
	// Contract Reweards
	// Possible values are: Trivial , Significant , Exceptional 
	//
	prestige			= Exceptional									
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.01
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.7 	
	rewardFunds			= @KerbalCareerContracts:baseComp * 2.2 
	advanceFunds		= @KerbalCareerContracts:baseAdv * 1.0 
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------
	//
	DATA_EXPAND
	{
		type 				= CelestialBody
		targetBody1			= @KerbalCareerContracts:homeMoonsSurface
	}

	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}		

	DATA
	{
		type 				= Vessel
		uniquenessCheck 	= CONTRACT_ACTIVE
		requiredValue 		= false
		targetVessel1 		= [ BaseRover ].Where(v => v.IsLanded() && v.CelestialBody() == @/targetBody).Random()
		title				= #SurfaceBaseCore_7
	}

	DATA
	{
		type 				= Location
		requiredValue 		= false
		vessellocatrion		= @/targetVessel1.Location()
		hidden 				= false
	}
	DATA
	{
		type = Biome
		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE
		biome1 = @targetBody1.Biomes().Where(b => b.RemainingScience() >20).SelectUnique()
		title = #SurfaceBaseCore_8
	}	
	
	DATA
	{
		type = ScienceSubject
		requiredValue = true
		uniquenessCheck = GROUP_ALL
		experiment1 = AllScienceSubjectsByBiome([@biome1]).Where(s => s.Experiment() == surfaceSample && s.CollectedScience() <1).First()
		title = #SurfaceBaseCore_8-2
	}	
	

 	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//	

	REQUIREMENT
	{
		name			= CompleteContract
		type			= CompleteContract
		contractType 	= SpaceStationCore
		title			= #GENERIC_REQ_1
	}

	REQUIREMENT
	{
		name			= CompleteContract
		type			= CompleteContract
		contractType 	= SpaceStationScience
		title			= #GENERIC_REQ_1
	}
	REQUIREMENT
	{
		name 					= BaseConstruct
		type 					= Expression
		checkOnActiveContract 	= false
		expression 				= ($BaseConstruction == true)
		title 					= #SurfaceBaseCore_8
	}


	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			CED_Contracts	= $CED_Contracts + 1
		}
	}
    BEHAVIOUR
    {
        name 				= WaypointGenerator
		type 				= WaypointGenerator
		WAYPOINT
        {    name 			= BaseLandingSpot
		     targetBody 	= @/targetBody1
			 icon 			= balloon
			 altitude 		= 0.0
			 latitude 		= @/vesselLocation.Latitude()
			 longitude 		= @/vesselLocation.Longitude()
        }
    }
	BEHAVIOUR
	{
		name = Expression
		type = Expression
	    CONTRACT_COMPLETED_FAILURE
		{
			type = bool
			BaseConstruction = false
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			type = bool
			BaseConstruction = false
		}
	}	
	// Contract Parameters ----------------------------------------------------------------------------------------------------
	//  
    PARAMETER
    {
        name 		= SurfaceBaseCore
        type 		= VesselParameterGroup
        title 		= #SurfaceBaseCore_9

		PARAMETER
        {
            name 			= HabModule
            type 			= HasCrewCapacity        
            minCapacity 	= 4
            title 			= Support 4 Kerbals
			hideChildren 	= true
        }
		PARAMETER
        {
            name = Any
			type = Any
			hideChildren = true		
			title = Can Generate Power (supports all stock methods and Near Future Solar/Electrical)
			PARAMETER
			{
                name = Solar
				title = Solar
				type = PartValidation
				hideChildren = true
				partModule = ModuleDeployableSolarPanel
				minCount = 1 	     
			}
			PARAMETER
			{
                name = Generator
				title = RTG
				type = PartValidation
				hideChildren = true
				partModule = ModuleGenerator
				minCount = 1 
			}
			PARAMETER
			{
                name = Generator1
				title = Fuel Cell
				type = PartValidation
				hideChildren = true
				part = FuelCell
				minCount = 1 	
			}
			PARAMETER
			{
                name = Generator2
				title = Fuel Cell Array
				type = PartValidation
				hideChildren = true
				part = FuelCellArray
				minCount = 1
			}
			PARAMETER:NEEDS[NearFutureSolar]
			{
			name = PartValidationNearFutureSolar
			type = PartValidation
			title = 1 or more curved solar panels
			hideChildren = true
			partModule = ModuleCurvedSolarPanel
			minCount = 1
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
			name = PartValidationNearFutureReactors
			type = PartValidation
			title = 1 or more fission reactors
			hideChildren = true
			partModule = FissionReactor
			minCount = 1
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
			name = PartValidationNearFutureRTGs
			type = PartValidation
			title = 1 or more radioisotope generators
			hideChildren = true
			partModule = ModuleRadioisotopeGenerator
			minCount = 1
			}
		}
		PARAMETER
		{
			name = VisitWaypoint
			type = VisitWaypoint
			index = 0
			distance = 2000.0
			title = Land near @/targetBody1 Rover
			showMessages = true
		}
		PARAMETER
		{
			name = ReachState
			type = ReachState
			hidden = true
			hideChildren = true
			situation = LANDED
			situation = SPLASHED
		}
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Base
		}
	}

}	