/ Contract Objectives:
//		1)  Add Crew Capacity to Space Station
//		
//
//------------------------------------------------------------------------------------------------------------------------

CONTRACT_TYPE
{
	name				= StationAddCrewCap
	sortKey				= 180
	group				= Colonization Exploration Division
	agent				= Colonization Exploration Division
	title				= #StationAddCrewCap_1
	genericTitle		= #StationAddCrewCap_2
	synopsis			= #StationAddCrewCap_3
	description			= #StationAddCrewCap_4
	genericDescription 	= #StationAddCrewCap_5
	minExpiry			= 5.0
	maxExpiry			= 14.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	completedMessage	= #StationAddCrewCap_6
	maxCompletions		= 0
	maxSimultaneous		= 2
	//
	targetBody			= @/targetBody1
	//
	// Contract Reweards
	// Possible values are: Trivial , Significant , Exceptional 
	//
	prestige			= Trivial									
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.01
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.5 	
	rewardFunds			= @KerbalCareerContracts:baseComp * 1.5 * @/percentChange
	advanceFunds		= @KerbalCareerContracts:baseAdv * 1.0 
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------
	//
    DATA
    {
        type 			= List<Vessel>
		requiredValue 	= false
        stationsAll		= AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() && v.CrewCapacity() < 25 && v.FreeDockingPorts() > 0 )
    }
    DATA
    {
        type 				= CelestialBody
        requiredValue 		= true
        uniquenessCheck 	= GROUP_ACTIVE
        targetBody1 		= OrbitedBodies().Where(body => @/stationsAll.Where(v => v.CelestialBody() == body).Count() == 0).SelectUnique()
		title 				= #StationAddCrewCap_7
    }	

	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}
	
	DATA
	{	
		type 				= int
		requiredValue 		= true
		title				= #StationAddCrewCap_8
		stationCapacity		= @/targetVessel1.CrewCapacity()
		crewCapAdd			= ROUND(@/stationCapacity * Random (1.5, 2.5), 1)
		newCrewCap			= @/stationCapacity + @/crewCapAdd
	}

	DATA
	{
		type			= 	double
		percentChange 	= 1 + @/crewCapAdd / @/stationCapacity
		title 			= #StationAddCrewCap_18
	}

 	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//	
	REQUIREMENT
	{
		name			= CompleteContract
		type			= CompleteContract
		contractType 	= SpaceStationCore
		title			= #GENERIC_REQ_1
	}

	REQUIREMENT
	{
		name			= CompleteContract
		type			= CompleteContract
		contractType 	= SpaceStationScience
		title			= #GENERIC_REQ_1
	}

	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			CED_Contracts	= $CED_Contracts + 1
		}
	}	
	// Contract Parameters ----------------------------------------------------------------------------------------------------
	//  
    PARAMETER
    {
        name 		= StationAddCrewCapacity
        type 		= VesselParameterGroup
        title 		= #StationAddCrewCap_9

		PARAMETER
		{	
			name = NewVessel
			type = NewVessel
			title = #StationAddCrewCap_11
			hideChildren = true
		}			

        //Check for a Docking Port
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			
			partModule = ModuleDockingNode
			minCount = 1
		}
		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous
			vessel = @/targetVessel1
			distance = 100
			title = #StationAddCrewCap_13
		}
		PARAMETER
		{
			name = Docking
			type = Docking
			vessel = @/targetVessel1
			title = #StationAddCrewCap_12
			hideChildren = true
			completeInSequence = true
		}				
		PARAMETER
		{
			name				= HasCrewCapacity
			type				= HasCrewCapacity
			minCapacity 		= @/stationCapacity + @/crewCapAdd
			title				= #StationAddCrewCap_17
			completeInSequence 	= true
		}

	}

	//Begins a 1-day countdown. Station must be in orbit for 1 days for contract to complete
	PARAMETER
	{
		name 			= Duration
		type 			= Duration
		duration 		= 1d
		preWaitText 	= #StationAddCrewCap_14
		waitingText 	= #StationAddCrewCap_15
		completionText 	= #StationAddCrewCap_16
		startCriteria 	= PARAMETER_COMPLETION
		parameter 		= StationAddCrewCapacity
	}

}	