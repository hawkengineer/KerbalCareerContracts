/ Contract Objectives:
//		1)  Send a probe to the next solar system
//		
//
//------------------------------------------------------------------------------------------------------------------------

CONTRACT_TYPE
{
	name				= interSolarProbe
	sortKey				= 100
	group				= Interstellar Exploration Division
	agent				= Interstellar Exploration Division
	title				= #interSolarProbe_1
	genericTitle		= #interSolarProbe_2
	synopsis			= #interSolarProbe_3
	description			= #interSolarProbe_4
	genericDescription 	= #interSolarProbe_5
	minExpiry			= 5.0
	maxExpiry			= 14.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	completedMessage	= #interSolarProbe_6
	maxCompletions		= 0
	maxSimultaneous		= 1
	//
	targetBody			= @/targetBody1
	//
	// Contract Reweards
	// Possible values are: Trivial , Significant , Exceptional 
	//
	prestige			= Significant									
	rewardScience		= @KerbalCareerContracts:rewardScience * 0.01
	rewardReputation	= @KerbalCareerContracts:rewardRep * 0.7	
	rewardFunds			= @KerbalCareerContracts:baseComp * 1.5
	advanceFunds		= @KerbalCareerContracts:baseAdv * 1.0 
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------
	//
	DATA_EXPAND
	{
		type 		= CelestialBody
		targetBody1	= @KerbalCareerContracts:intersellarSuns
	}
	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= @/targetBody1
	}	

	DATA
	{
		type				= List<CelestialBody>
		requiredValue		= false
		homePlanets		 	= @KerbalCareerContracts:homeSystemPlanets
		orbitPlanets		= @/homePlanets.Where(cb => cb.HaveOrbited() )
	}
    DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Random(12)
    }

    DATA
	{
		type = List<ScienceSubject>
        hidden = true
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
    
		scienceSubjectsTemp1H = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments1)
        scienceSubjectsTemp2H = @scienceSubjectsTemp1H.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3H = @scienceSubjectsTemp2H.Where(s => s.Situation() == InSpaceHigh)
		scienceSubjectsTemp4H = @scienceSubjectsTemp3H.Where(s => s.RemainingScience() >= 0.5)

        scienceListHigh = @scienceSubjectsTemp4H.Random(3,6)
    }
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }	
	DATA
	{
		type = double
		SpaceThreshold = @/targetBody.SpaceAltitudeThreshold()
		minAlt = @/SpaceThreshold / 1000
		title = #interSolarProbe_7
	}	


 	// -----------------------------------------------------------------------------------------------------------------------
	// Contract Requirements
	//	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @/homePlanets.Count() == @/orbitPlanets.Count()
		title = #interSolarProbe_8
	}

	REQUIREMENT
	{
		name = SystemChecks
		type = Expression
		checkOnActiveContract = false
		expression = @/intersellarSuns.Count() >= 1
		title = #interSolarProbe_9
	}

	REQUIREMENT
	{
		name = OrbitCheck
		type = Expression
		expression = @KerbalCareerContracts:starsOrbited.Contains(@/targetBody) == false
		title = #interSolarProbe_15	
	}

	// Contract BEHAVIOUR -----------------------------------------------------------------------------------------------------
	//
	//  Count the number of Contracts Completed for the division
	//
	BEHAVIOUR
	{
		name	= Expression
		type	= Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			IED_Contracts	= $IED_Contracts + 1
		}
	}	

	// Contract Parameters ----------------------------------------------------------------------------------------------------
	//  
    PARAMETER
    {
        name = InterStellarProbe
        type = VesselParameterGroup
        define = interstellarProbe
		title = #interSolarProbe_10

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Probe
			vesselType = Relay
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = #interSolarProbe_11
			minCrew = 0
			maxCrew = 0
		}
		PARAMETER
		{
			name = OrbitSun
			type = Orbit
			situation = ORBITING
			minAltitude = @/SpaceThreshold
			title = #interSolarProbe_12
		}		

		PARAMETER
		{
			name = CollectScience
			type = CollectScience

			//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
			biome 				= @scienceSubjectH.Biome()
			situation 			= @scienceSubjectH.Situation()
			experiment 			= @scienceSubjectH.Experiment()
			recoveryMethod 		= @/recoveryMethod
			rewardFunds 		= @/KerbalCareerContracts:baseComp * 0.1
			completedMessage 	= #interSolarProbe_14
			//title 			= Collect science data from the @scienceSubjectH.Experiment() in @scienceSubjectH.Situation()
			title				= #interSolarProbe_13
			
			disableOnStateChange = true
		
			ITERATOR
			{
				type = ScienceSubject
				scienceSubjectH = @/scienceListHigh
			}
	
		}

	}

	
}	