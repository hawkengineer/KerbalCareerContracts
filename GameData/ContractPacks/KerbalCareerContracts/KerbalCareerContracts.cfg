// =======================================================================================================================================
//
// Disable some of the stock contracts
// 
CONTRACT_CONFIGURATOR:NEEDS[SCANsat]
{
	disabledContractType = ScanSatOfficial
	disabledContractType = ScanSat Official
		
}

CONTRACT_GROUP
{
	name = KerbalCareerContracts
	displayName = Kerbal Space Agency (KSA)
	agent = Kerbal Space Program
	minVersion = 1.15.0
	maxSimultaneous = 0
	maxCompletions = 0
	tip = Exploring the world of Kerbal Space Program

	//
	// =======================================================================================================================================
	//
	// Define System PLanets and Moons
	//
	// This section will identify planets based on the detected planet pack installed.  This is needed so that planet packs that have more than one solar system, the contract system works properly.
	//
		
	DATA
	{
		type = Double
		requiredValue = false
		homeWorldSMA = HomeWorld().SemiMajorAxis()                  	// Find the homeWorld SMA to configure inner and outer planets in later section
	}	

	DATA:NEEDS[BeyondHome]
	{
		type = Double
		requiredValue = false
		lastSystemPlanetSMA = CelestialBody(Vasto).SemiMajorAxis()		// Find the last planet SMA in the home system
		tempKerbolSMA = CelestialBody(Kerbol).SemiMajorAxis()
		//
		extraSystemSearchLimit = @lastSystemPlanetSMA * 1.1				// SMA Limit for detecting possible additional stellar systems for contracts
		//
	}	
	DATA:NEEDS[BeyondHome]
	{
		type = List<CelestialBody>
		tempGas = [Gateway]
	}

	DATA:NEEDS[!BeyondHome&!JNSQ]
	{
		type = List<CelestialBody>
		requiredValue = false
		BodyList = @/homeSystemPlanets
		tempGas = @/BodyList.Where(cb => !cb.HasSurface() && cb.HasAtmosphere())

	}
	DATA:NEEDS[JNSQ]
	{
		type = Double
		requiredValue = false
		lastSystemPlanetSMA = CelestialBody(Nara).SemiMajorAxis()		// Find the last planet SMA in the home system
		//
		extraSystemSearchLimit = @lastSystemPlanetSMA * 1.1				// SMA Limit for detecting possible additional stellar systems for contracts
	}	

	DATA:NEEDS[!BeyondHome&!JNSQ]
	{
		type = Double
		requiredValue = false
		lastSystemPlanetSMA = 5000000000000								// Default value for stock and other unknown planet packs
		//
		extraSystemSearchLimit = @lastSystemPlanetSMA * 1.1				// SMA Limit for detecting possible additional stellar systems for contracts

	}	

	
	//
	// =======================================================================================================================================
	//
	// This section captures the planet list for either unknown planet packs or for Stock and JNSQ.  Adjustments will be made for planet packs such as Beyond Home and others to accomodate the different scales.
	//
	// Definitions of variables used:
	//
	//	homeSuns				= Determine Sun for the home planet
	//	tempSuns				= Determines whether there is a possible binary or multiple Suns within the home system
	//	newHomeSuns				= List of all Sun bodies within the home system
	//	Temp1					= List of all planets/bodies in orbit around the Suns
	//	homeSystemPlanets		= List of all bodies but excludes any additional Suns that are in orbit (used to remove any interstellar systems from the list)
	//	systemPlanetsSurface	= List of all system planets with a surface
	//	intersellarSuns			= List of all Suns in interstellar space
	//  moonList1				= List of all moons within the home system
	//	planetList1				= Planet list that has a surface and is not the homeWorld
	//	bodyList1				= Complete listing of planets with surface and moons within the home system
	//	stationList1			= Filter list from bodyList1 that have a surface
	//	systemSurface			= All planets with a surface within the home system
	//	innerBodies				= All planets between the Sun and Home Planet
	//	outerBodies				= All planets beyond the home planet and the end of the home system
	//	solarSystemSuns			= List of all Suns beyond the home system Sun
	//	homeplanet				= Homeworld 
	//	moonsOrbited			= Number of moons around home planet that has been orbited
	//	reachedMoons			= Number of moons around home planet that has been reached
	//	
	//
	

	
	DATA
	{
		type = List<CelestialBody>
		requiredValue = false
		//
		homeSuns 		= HomeWorld().Parent()
		tempSuns 		= AllBodies().Where(cb => cb.SemiMajorAxis() <= @homeWorldSMA && cb !=HomeWorld() && cb.Parent() == HomeWorld().Parent() && cb.IsPlanet() && !cb.HasSurface() )
		newHomeSuns 	= @homeSuns.Concat(@tempSuns)
		newHomeSuns2	= @newHomeSuns.Concat(@homeplanet)
		//
		Temp1 = HomeWorld().Parent().Children().ExcludeAll( @newHomeSuns2 )
		homeSystemPlanets = @/Temp1.ExcludeAll( @solarSystemSuns )
		systemPlanetsSurface = @/Temp1.Where(cb => cb.HasSurface() )
		intersellarSuns = AllBodies().Where(cb => cb.SemiMajorAxis() > @extraSystemSearchLimit && cb.Parent() == HomeWorld().Parent() && !cb.HasSurface() )
		//
		moonList1 = AllBodies().Where(cb => cb.IsMoon() && cb.Parent().SemiMajorAxis() < @extraSystemSearchLimit && cb.Parent() !=HomeWorld() )
		planetList1 = AllBodies().Where(cb => cb.IsPlanet() && cb.HasSurface() && cb !=HomeWorld() )
		bodyList1 = @planetList1.Concat(@moonList1)
		stationList1 = @bodyList1.Where(cb => cb.HasSurface() )
		//
		//homeSystemPlanets2 = AllBodies().Where(cb => cb.SemiMajorAxis() < @extraSystemSearchLimit && cb.Parent() == HomeWorld().Parent() ).ExcludeAll( @newHomeSuns )
		systemSurface = AllBodies().Where(cb => cb.SemiMajorAxis() < @extraSystemSearchLimit && cb !=HomeWorld() && cb.Parent() == HomeWorld().Parent() && cb.HasSurface() )
		innerBodies = AllBodies().Where(cb => cb.SemiMajorAxis() <= @homeWorldSMA && cb !=HomeWorld() && cb.Parent() == HomeWorld().Parent() && cb.IsPlanet() && cb.HasSurface() )
		outerBodies = AllBodies().Where(cb => cb.SemiMajorAxis() >= @homeWorldSMA && cb.SemiMajorAxis() < @extraSystemSearchLimit && cb !=HomeWorld() && cb.Parent() == HomeWorld().Parent() )
		innerGasGiants = @/innerBodies.Where(cb => !cb.HasSurface())
		outerGasGiants = @/outerBodies.Where(cb => !cb.HasSurface()).Concat(@/tempGas)
		//
		//
		solarSystemSuns = AllBodies().Where(cb => cb.SemiMajorAxis() > @extraSystemSearchLimit && cb.Parent() == HomeWorld().Parent() )
		//
		homeplanet = HomeWorld()
		homeSystem = AllBodies().Where(cb => ((cb.IsHomeWorld() || cb.Parent().IsHomeWorld()) && cb.HasSurface()))
		
		//
		moonsOrbited 		= OrbitedBodies().Where(cb => cb.Parent().IsHomeWorld() && cb !=HomeWorld() )
		reachedMoons		= ReachedBodies().Where(cb => cb.Parent().IsHomeWorld())
		orbitedMoons		= OrbitedBodies().Where(cb => cb.Parent().IsHomeWorld())
		landedMoons			= LandedBodies().Where(cb => cb.Parent().IsHomeWorld())
		returnedMoons		= ReturnedFromBodies().Where(cb => cb.Parent().IsHomeWorld())
		homeMoons 			= AllBodies().Where(cb => (cb.Parent().IsHomeWorld() ))
		homeMoonsSurface 	= AllBodies().Where(cb => (cb.Parent().IsHomeWorld() && cb.HasSurface() ))
		firstMoon			= HomeWorld().Children().First()
		//
		reachedPlanets	= ReachedBodies().Where(cb => cb.IsPlanet() && cb !=HomeWorld() )
		orbitedPlanets	= OrbitedBodies().Where(cb => cb.IsPlanet() && cb !=HomeWorld() )
		orbitedList		= OrbitedBodies().Where(cb => cb !=HomeWorld() && cb.Parent() !=HomeWorld() && cb !=Sun() )
		landedList		= LandedBodies().Where(cb => cb !=HomeWorld() && cb.Parent() !=HomeWorld() )
		landedPlanets	= LandedBodies().Where(cb => cb.IsPlanet() && cb !=HomeWorld() )
		returnedPlanets	= ReturnedFromBodies().Where(cb => cb.IsPlanet() && cb !=HomeWorld() )
		//
		nextBodies		= NextUnreachedBodies(8).Where(cb => cb.IsPlanet() && cb !=HomeWorld() )
		nextBodiesAll	= NextUnreachedBodies(9)
		reachedBodies	= ReachedBodies().Where(cb => cb !=HomeWorld() )
		//
		title = Setup and determine the different planets and moons.
	}

	//
	// =======================================================================================================================================
	//
	// This section just performs a random roll which is used within some of the contract setup
	//
	
	DATA
	{
		type = int
		randomRoll = Random(1, 10)
		//
	}
	
	//
	// =======================================================================================================================================
	//
	// This section setups the nominal/base contract payments
	//
	
	DATA
	{
		type = Double
		baseAdv  = 100000		// Set the base advance payment to $100,000
		baseComp = 100000		// Set the base completion payment to $100,000
		baseFail = 100000		// Set the base failure cost to $100,000
		failRep  = 50			// Set the base reputation faiilure cost to 50
		rewardRep = 75			// Set the base reputation reward to 75
		rewardScience = 5		// Set the base science reward to 5
		//
		title = Configure the base rewards and failure rates for all contracts
		requiredValue = false
		//
	}
	DATA
	{
		type 	= Double
		title = Set the minimum Power Relay for the contract group
		requiredValue = false			
		minRelayHome 	= 5000000 // HG-5 or equivalent
		minRelayMoon 	= 5000000 // HG-5 or equivalent
		minRelayInner	= 2000000000 // RA-05 or equivalent
		minRelayOuter1	= 2000000000 // RA-05 or equivalent
		minRelayOuter2	= 15000000000 // RA-50 or equivalent
		minRelayOuter3	= 100000000000 // RA-100 or equivalent
	}

	DATA
	{
		type			= List<ScienceExperiment>
		requiredValue 	= false
		allExperiments	= AllExperiments()
		homeExperiments	= AvailableExperiments(HomeWorld() )
	}
	
	//
	// =======================================================================================================================================
	//
	// This section configures the different contract groups which all the contracts will be placed
	//
	//
	
	CONTRACT_GROUP
	{
		name = Robotic Exploration Division
		displayName = Robotic Exploration Division (RED)
		agent = Robotic Exploration Division
		maxSimultaneous = 0
		maxCompletions = 0
	    minVersion = 1.15.0
		sortKey = 100

		CONTRACT_GROUP
		{
			name = Home Exploration Division
			displayName = Home Exploration Division
			agent = Home Exploration Division
			maxSimultaneous = 0
			maxCompletions = 0
			minVersion = 1.15.0
			sortKey = 120
		}
		CONTRACT_GROUP
		{
			name = Planetary Exploration Division
			displayName = Planetary Exploration Division
			agent = Planetary Exploration Division
			maxSimultaneous = 0
			maxCompletions = 0
			minVersion = 1.15.0
			sortKey = 140
		}
	}

	CONTRACT_GROUP
	{
		name = Science Exploration Division
		displayName = Science Exploration Division (SED)
		agent = Science Exploration Division
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 200
		
	}

	CONTRACT_GROUP
	{
		name = Kerbal Exploration Division
		displayName = Kerbal Exploration Division (KED)
		agent = Kerbal Exploration Division
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 300
		
	}

	CONTRACT_GROUP
	{
		name = Colonization Exploration Division
		displayName = Colonization Exploration Division
		agent = Colonization Exploration Division
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 400
		
	}

	CONTRACT_GROUP
	{
		name = Interstellar Exploration Division
		displayName = Interstellar Exploration Division (IED)
		agent = Interstellar Exploration Division
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 500
		
	}

	CONTRACT_GROUP
	{
		name = Commercial Services Division
		displayName = Commercial Services Division
		agent = Commercial Services Division
		maxSimultaneous = 0
		maxCompletions = 0
		minVersion = 1.15.0
		sortKey = 600
		
	}


}		